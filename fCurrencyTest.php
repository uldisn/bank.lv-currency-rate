<?php

/**
 * Generated by PHPUnit_SkeletonGenerator 1.2.0 on 2013-04-19 at 11:22:33.
 */
class fCurrencyTest extends PHPUnit_Framework_TestCase {

    /**
     * @var fCurrency
     */
    protected $object;
    const date1 = '2010.01.01';
    const date2 = '2011.01.01';

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp() {
        $this->clearData();
        $this->object = new fCurrency;
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown() {
        $this->clearData();
    }
    
    /**
     * izdzēš testējamos datumus no  valūtu kursu tabulas
     */
    protected function clearData(){
        mysql_query("delete from currency_rate where `date`='".self::date1."'");
        mysql_query("delete from currency_rate where `date`='".self::date2."'");
    }


    public function testGetCurrencyRate() {
        //  LVL kurs vienmēr ir 1
        $nRate = $this->object->getCurrencyRateById(CUR_LVL, self::date1);
        $this->assertEquals($nRate,1);
        $this->assertFalse($this->object->sError);
        
        $nRate = $this->object->getCurrencyRateById(CUR_EUR, self::date1);
        $this->assertEquals($nRate,0.70280400,$this->object->sError);
        $this->assertFalse($this->object->sError);        

        $nRate = $this->object->getCurrencyRateByCode('USD', self::date1);
        $this->assertEquals($nRate,0.48900000,$this->object->sError);

        $nRate = $this->object->getCurrencyRateById(99, self::date1);
        $this->assertFalse($nRate);

        $nRate = $this->object->getCurrencyRateByCode('CCCCC', self::date1);
        $this->assertFalse($nRate);

        $nRate = $this->object->getCurrencyRateById(CUR_LVL, self::date2);
        $this->assertEquals($nRate,1);
        $this->assertFalse($this->object->sError);

        $nRate = $this->object->getCurrencyRateById(CUR_EUR, self::date2);
        $this->assertEquals($nRate,0.70280400,$this->object->sError);
        $this->assertFalse($this->object->sError);        

        $nRate = $this->object->getCurrencyRateByCode('USD', self::date2);
        $this->assertEquals($nRate,0.53500000,$this->object->sError);
        
        
    }

}
